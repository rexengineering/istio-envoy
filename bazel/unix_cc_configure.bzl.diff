diff --git a/../../bazel/tools/cpp/unix_cc_configure.bzl b/unix_cc_configure.bzl
index 82cfaa218..27d6bd369 100644
--- a/../../bazel/tools/cpp/unix_cc_configure.bzl
+++ b/unix_cc_configure.bzl
@@ -1,3 +1,11 @@
+# This file was imported from https://github.com/bazelbuild/bazel at 3d00b2a. We apply a number of
+# local modifications to deal with known issues in Bazel 0.10.0.
+#
+# * https://github.com/bazelbuild/bazel/issues/2840
+# * (and potentially) https://github.com/bazelbuild/bazel/issues/2805
+#
+# See unix_cc_configure.bzl.diff for the changes made in this fork.
+
 # pylint: disable=g-bad-file-header
 # Copyright 2016 The Bazel Authors. All rights reserved.
 #
@@ -219,7 +227,6 @@ def _crosstool_content(repository_ctx, cc, cpu_value, darwin):
           "-std=c++0x",
       ] + _escaped_cplus_include_paths(repository_ctx),
       "linker_flag": [
-          "-lstdc++",
           "-lm",  # Some systems expect -lm in addition to -lstdc++
           # Anticipated future default.
       ] + (
@@ -375,8 +382,8 @@ def find_cc(repository_ctx, overriden_tools):
   if "gcc" in overriden_tools:
     return overriden_tools["gcc"]
 
-  cc_name = "gcc"
-  cc_environ = repository_ctx.os.environ.get("CC")
+  cc_name = "g++"
+  cc_environ = repository_ctx.os.environ.get("CXX")
   cc_paren = ""
   if cc_environ != None:
     cc_environ = cc_environ.strip()
@@ -389,7 +396,7 @@ def find_cc(repository_ctx, overriden_tools):
   cc = repository_ctx.which(cc_name)
   if cc == None:
     fail(
-        ("Cannot find gcc or CC%s, either correct your path or set the CC"
+        ("Cannot find g++ or CXX%s, either correct your path or set the CXX"
          + " environment variable") % cc_paren)
   return cc
 
