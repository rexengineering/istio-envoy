--- 
+++ 
@@ -24,6 +24,7 @@
 
 namespace Envoy {
 namespace Http {
+namespace Legacy {
 namespace Http1 {
 
 class ConnectionImpl;
@@ -75,7 +76,8 @@
   void clearReadDisableCallsForTests() { read_disable_calls_ = 0; }
 
 protected:
-  StreamEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter);
+  StreamEncoderImpl(ConnectionImpl& connection,
+                    Http::Http1::HeaderKeyFormatter* header_key_formatter);
   void encodeHeadersBase(const RequestOrResponseHeaderMap& headers, absl::optional<uint64_t> status,
                          bool end_stream);
   void encodeTrailersBase(const HeaderMap& headers);
@@ -114,7 +116,7 @@
 
   void encodeFormattedHeader(absl::string_view key, absl::string_view value);
 
-  const HeaderKeyFormatter* const header_key_formatter_;
+  const Http::Http1::HeaderKeyFormatter* const header_key_formatter_;
   absl::string_view details_;
 };
 
@@ -123,7 +125,8 @@
  */
 class ResponseEncoderImpl : public StreamEncoderImpl, public ResponseEncoder {
 public:
-  ResponseEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  ResponseEncoderImpl(ConnectionImpl& connection,
+                      Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
 
   bool startedResponse() { return started_response_; }
@@ -142,7 +145,8 @@
  */
 class RequestEncoderImpl : public StreamEncoderImpl, public RequestEncoder {
 public:
-  RequestEncoderImpl(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+  RequestEncoderImpl(ConnectionImpl& connection,
+                     Http::Http1::HeaderKeyFormatter* header_key_formatter)
       : StreamEncoderImpl(connection, header_key_formatter) {}
   bool upgradeRequest() const { return upgrade_request_; }
   bool headRequest() const { return head_request_; }
@@ -203,7 +207,7 @@
   virtual bool supportsHttp10() { return false; }
   bool maybeDirectDispatch(Buffer::Instance& data);
   virtual void maybeAddSentinelBufferFragment(Buffer::WatermarkBuffer&) {}
-  CodecStats& stats() { return stats_; }
+  Http::Http1::CodecStats& stats() { return stats_; }
   bool enableTrailers() const { return enable_trailers_; }
 
   // Http::Connection
@@ -218,9 +222,9 @@
   bool strict1xxAnd204Headers() { return strict_1xx_and_204_headers_; }
 
 protected:
-  ConnectionImpl(Network::Connection& connection, CodecStats& stats, http_parser_type type,
-                 uint32_t max_headers_kb, const uint32_t max_headers_count,
-                 HeaderKeyFormatterPtr&& header_key_formatter, bool enable_trailers);
+  ConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
+                 http_parser_type type, uint32_t max_headers_kb, const uint32_t max_headers_count,
+                 Http::Http1::HeaderKeyFormatterPtr&& header_key_formatter, bool enable_trailers);
 
   bool resetStreamCalled() { return reset_stream_called_; }
   void onMessageBeginBase();
@@ -240,10 +244,10 @@
   void checkMaxHeadersSize();
 
   Network::Connection& connection_;
-  CodecStats& stats_;
+  Http::Http1::CodecStats& stats_;
   http_parser parser_;
   Http::Code error_code_{Http::Code::BadRequest};
-  const HeaderKeyFormatterPtr header_key_formatter_;
+  const Http::Http1::HeaderKeyFormatterPtr header_key_formatter_;
   HeaderString current_header_field_;
   HeaderString current_header_value_;
   bool processing_trailers_ : 1;
@@ -420,7 +424,7 @@
  */
 class ServerConnectionImpl : public ServerConnection, public ConnectionImpl {
 public:
-  ServerConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ServerConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
                        ServerConnectionCallbacks& callbacks, const Http1Settings& settings,
                        uint32_t max_request_headers_kb, const uint32_t max_request_headers_count,
                        envoy::config::core::v3::HttpProtocolOptions::HeadersWithUnderscoresAction
@@ -432,7 +436,7 @@
    * An active HTTP/1.1 request.
    */
   struct ActiveRequest {
-    ActiveRequest(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter)
+    ActiveRequest(ConnectionImpl& connection, Http::Http1::HeaderKeyFormatter* header_key_formatter)
         : response_encoder_(connection, header_key_formatter) {}
 
     HeaderString request_url_;
@@ -524,7 +528,7 @@
  */
 class ClientConnectionImpl : public ClientConnection, public ConnectionImpl {
 public:
-  ClientConnectionImpl(Network::Connection& connection, CodecStats& stats,
+  ClientConnectionImpl(Network::Connection& connection, Http::Http1::CodecStats& stats,
                        ConnectionCallbacks& callbacks, const Http1Settings& settings,
                        const uint32_t max_response_headers_count);
 
@@ -533,8 +537,8 @@
 
 private:
   struct PendingResponse {
-    PendingResponse(ConnectionImpl& connection, HeaderKeyFormatter* header_key_formatter,
-                    ResponseDecoder* decoder)
+    PendingResponse(ConnectionImpl& connection,
+                    Http::Http1::HeaderKeyFormatter* header_key_formatter, ResponseDecoder* decoder)
         : encoder_(connection, header_key_formatter), decoder_(decoder) {}
 
     RequestEncoderImpl encoder_;
@@ -598,6 +602,7 @@
 };
 
 } // namespace Http1
+} // namespace Legacy
 } // namespace Http
 } // namespace Envoy
 